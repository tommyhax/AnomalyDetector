"""
Gaussian-based training data provider.

This module implements `TrainingHelperGauss5`, a concrete subclass of `TrainingHelper`
that generates synthetic training data using five Gaussian-distributed variables.
The data is encoded as a string with named values representing different elements.

Classes:
    TrainingHelperGauss5 (TrainingHelper): Generates and processes Gaussian-based training data.

Methods:
    get_data(): Generates synthetic training data with five Gaussian-distributed features.
    extract_features(data): Extracts numerical values from raw text-based data.
"""

from datetime import datetime
import re
import uuid

import numpy as np

from entities.data import Data
from training_helper_abstract import TrainingHelper


class TrainingHelperGauss5(TrainingHelper):
    """Generates and processes Gaussian-based training data."""

    def get_data(self):
        """
        This method generates a synthetic dataset of numerical values encoded in
        text format, simulating data coming from a real source. Each data value
        consists of five Gaussian random variables encoded as a string of named
        values.

        Returns:
            list[Data]: A list of data elements.
        """
        num_samples = 500
        features_per_sample = 5
        feature_names = ["air", "earth", "fire", "water", "void"]
        return [
            Data(
                id=uuid.uuid4(),
                timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                value=", ".join(
                    f"{name} = {val}" for name, val in zip(feature_names, sample)
                ),
            )
            for sample in np.random.normal(0, 1, (num_samples, features_per_sample))
        ]

    def extract_features(self, data):
        """
        Extract the numerical features from a dataset generated by get_data().

        Args:
            data (list[Data] or Data): The input data, which may be a single Data instance
                                       or a list of instances.

        Returns:
            list[list[float]]: A list of feature vectors extracted from the input data.
        """

        def extract_features_single(data: Data):
            match = re.findall(r"[-+]?\d*\.\d+|\d+", data.value)
            return list(map(float, match))

        if isinstance(data, list):
            return [extract_features_single(d) for d in data]
        return [extract_features_single(data)]
